generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model car {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  plate         String?    @unique
  owner_id      String?    @db.Uuid
  mph           Int?       @default(0)
  route_id      String?    @db.Uuid
  route_index   Int?       @default(0)
  node_id       String?    @db.Uuid
  node_position Int?       @default(0)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  node          node?      @relation(fields: [node_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  character     character? @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  route         route?     @relation(fields: [route_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model character {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  car        car[]
}

model feature {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node_id    String   @db.Uuid
  data       Json?
  glyph      String?  @default(" ")
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  node       node     @relation(fields: [node_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model map {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String?
  w      Int?
  h      Int?
  glyphs String?
  route  route[]
}

model node {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  x          Int?          @default(0)
  y          Int?          @default(0)
  miles      Int?          @default(0)
  created_at DateTime      @default(now()) @db.Timestamp(6)
  updated_at DateTime      @default(now()) @db.Timestamp(6)
  car        car[]
  feature    feature[]
  ways       nodesOnWays[]
}

model nodesOnWays {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node_id  String? @db.Uuid
  way_id   String? @db.Uuid
  sequence Int?    @default(0)
  node     node?   @relation(fields: [node_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  way      way?    @relation(fields: [way_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pgmigrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model route {
  id     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String?
  map_id String?        @db.Uuid
  map    map?           @relation(fields: [map_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  car    car[]
  ways   waysOnRoutes[]
}

model way {
  id     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String?
  nodes  nodesOnWays[]
  routes waysOnRoutes[]
}

model waysOnRoutes {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  way_id   String? @db.Uuid
  route_id String? @db.Uuid
  sequence Int?    @default(0)
  route    route?  @relation(fields: [route_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  way      way?    @relation(fields: [way_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
