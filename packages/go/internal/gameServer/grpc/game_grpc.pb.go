// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package game_server_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoadTripGameClient is the client API for RoadTripGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoadTripGameClient interface {
	Upsert(ctx context.Context, in *UpsertCarRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUpdate(ctx context.Context, in *GetUpdateRequest, opts ...grpc.CallOption) (*Update, error)
}

type roadTripGameClient struct {
	cc grpc.ClientConnInterface
}

func NewRoadTripGameClient(cc grpc.ClientConnInterface) RoadTripGameClient {
	return &roadTripGameClient{cc}
}

func (c *roadTripGameClient) Upsert(ctx context.Context, in *UpsertCarRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/roadtrip.RoadTripGame/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadTripGameClient) GetUpdate(ctx context.Context, in *GetUpdateRequest, opts ...grpc.CallOption) (*Update, error) {
	out := new(Update)
	err := c.cc.Invoke(ctx, "/roadtrip.RoadTripGame/GetUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoadTripGameServer is the server API for RoadTripGame service.
// All implementations must embed UnimplementedRoadTripGameServer
// for forward compatibility
type RoadTripGameServer interface {
	Upsert(context.Context, *UpsertCarRequest) (*Empty, error)
	GetUpdate(context.Context, *GetUpdateRequest) (*Update, error)
	mustEmbedUnimplementedRoadTripGameServer()
}

// UnimplementedRoadTripGameServer must be embedded to have forward compatible implementations.
type UnimplementedRoadTripGameServer struct {
}

func (UnimplementedRoadTripGameServer) Upsert(context.Context, *UpsertCarRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedRoadTripGameServer) GetUpdate(context.Context, *GetUpdateRequest) (*Update, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdate not implemented")
}
func (UnimplementedRoadTripGameServer) mustEmbedUnimplementedRoadTripGameServer() {}

// UnsafeRoadTripGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoadTripGameServer will
// result in compilation errors.
type UnsafeRoadTripGameServer interface {
	mustEmbedUnimplementedRoadTripGameServer()
}

func RegisterRoadTripGameServer(s grpc.ServiceRegistrar, srv RoadTripGameServer) {
	s.RegisterService(&RoadTripGame_ServiceDesc, srv)
}

func _RoadTripGame_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadTripGameServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roadtrip.RoadTripGame/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadTripGameServer).Upsert(ctx, req.(*UpsertCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadTripGame_GetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadTripGameServer).GetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roadtrip.RoadTripGame/GetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadTripGameServer).GetUpdate(ctx, req.(*GetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoadTripGame_ServiceDesc is the grpc.ServiceDesc for RoadTripGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoadTripGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roadtrip.RoadTripGame",
	HandlerType: (*RoadTripGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _RoadTripGame_Upsert_Handler,
		},
		{
			MethodName: "GetUpdate",
			Handler:    _RoadTripGame_GetUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/gameServer/grpc/game.proto",
}
